//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Music
{
    using System;
    using System.Collections.Generic;
    
    public partial class Song
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Song()
        {
            this.Comment = new HashSet<Comment>();
            this.PlayListSong = new HashSet<PlayListSong>();
        }
    
        public int Id { get; set; }
        public byte[] MultimediaData { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Type { get; set; }
        public string AuthorName { get; set; }
        public System.DateTime ReleaseDate { get; set; }
        public string Album { get; set; }
        public int Duraction { get; set; }
      
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Comment> Comment { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PlayListSong> PlayListSong { get; set; }

        public Song(int id, byte[] multimediaData, string name, string description, string type, string authorName, DateTime releaseDate, string album, int duraction)
        {
            Id = id;
            MultimediaData = multimediaData;
            Name = name;
            Description = description;
            Type = type;
            AuthorName = authorName;
            ReleaseDate = releaseDate;
            Album = album;
            Duraction = duraction;
          
        }

        public Song(byte[] multimediaData, string name, string description, string type, string authorName, DateTime releaseDate, string album, int duraction)
        {
            MultimediaData = multimediaData;
            Name = name;
            Description = description;
            Type = type;
            AuthorName = authorName;
            ReleaseDate = releaseDate;
            Album = album;
            Duraction = duraction;
            
        }

        public override bool Equals(object obj)
        {
            return obj is Song song &&
                   Id == song.Id &&
                   EqualityComparer<byte[]>.Default.Equals(MultimediaData, song.MultimediaData) &&
                   Name == song.Name &&
                   Description == song.Description &&
                   Type == song.Type &&
                   AuthorName == song.AuthorName &&
                   ReleaseDate == song.ReleaseDate &&
                   Album == song.Album &&
                   Duraction == song.Duraction;
                
        }

        public override int GetHashCode()
        {
            int hashCode = 1013002190;
            hashCode = hashCode * -1521134295 + Id.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<byte[]>.Default.GetHashCode(MultimediaData);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Description);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Type);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(AuthorName);
            hashCode = hashCode * -1521134295 + ReleaseDate.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Album);
            hashCode = hashCode * -1521134295 + Duraction.GetHashCode();
          
            return hashCode;
        }
        public override string ToString()
        {
            return "Song{" +
                "Id=" + Id +
                ", LocalUrl='" + MultimediaData + '\'' +
                ", Name='" + Name + '\'' +
                ", Description='" + Description + '\'' +
                ", Type='" + Type + '\'' +
                ", AuthorName='" + AuthorName + '\'' +
                ", ReleaseDate='" + ReleaseDate +
                ", Album='" + Album + '\'' +
                ", Duraction=" + Duraction +
              
                '}';
        }
    }
}
