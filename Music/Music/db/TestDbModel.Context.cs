//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Music.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
            : base("name=TestDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<DUser> DUser { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageConclusionTime> MessageConclusionTime { get; set; }
        public virtual DbSet<PlayList> PlayList { get; set; }
        public virtual DbSet<PlayListSong> PlayListSong { get; set; }
        public virtual DbSet<Song> Song { get; set; }
        public virtual DbSet<UserMessage> UserMessage { get; set; }
    
        public virtual ObjectResult<Comment> CommentOperation(Nullable<int> command, Nullable<int> id = null, string text = null, Nullable<System.DateTime> date = null, Nullable<int> userId = null, Nullable<int> songId = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var songIdParameter = songId.HasValue ?
                new ObjectParameter("SongId", songId) :
                new ObjectParameter("SongId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Comment>("CommentOperation", commandParameter, idParameter, textParameter, dateParameter, userIdParameter, songIdParameter);
        }
    
        //public virtual ObjectResult<Comment> CommentOperation(Nullable<int> command, Nullable<int> id, string text, Nullable<System.DateTime> date, Nullable<int> userId, Nullable<int> songId, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var textParameter = text != null ?
        //        new ObjectParameter("Text", text) :
        //        new ObjectParameter("Text", typeof(string));
    
        //    var dateParameter = date.HasValue ?
        //        new ObjectParameter("Date", date) :
        //        new ObjectParameter("Date", typeof(System.DateTime));
    
        //    var userIdParameter = userId.HasValue ?
        //        new ObjectParameter("UserId", userId) :
        //        new ObjectParameter("UserId", typeof(int));
    
        //    var songIdParameter = songId.HasValue ?
        //        new ObjectParameter("SongId", songId) :
        //        new ObjectParameter("SongId", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Comment>("CommentOperation", mergeOption, commandParameter, idParameter, textParameter, dateParameter, userIdParameter, songIdParameter);
        //}
    
        public virtual ObjectResult<MessageConclusionTime> MessageConclusionTimeOperation(Nullable<int> command, Nullable<int> id = null, Nullable<int> firstUserId = null, Nullable<int> secondUserId = null, Nullable<System.DateTime> firstUserDate = null, Nullable<System.DateTime> secondUserDate = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstUserIdParameter = firstUserId.HasValue ?
                new ObjectParameter("FirstUserId", firstUserId) :
                new ObjectParameter("FirstUserId", typeof(int));
    
            var secondUserIdParameter = secondUserId.HasValue ?
                new ObjectParameter("SecondUserId", secondUserId) :
                new ObjectParameter("SecondUserId", typeof(int));
    
            var firstUserDateParameter = firstUserDate.HasValue ?
                new ObjectParameter("FirstUserDate", firstUserDate) :
                new ObjectParameter("FirstUserDate", typeof(System.DateTime));
    
            var secondUserDateParameter = secondUserDate.HasValue ?
                new ObjectParameter("SecondUserDate", secondUserDate) :
                new ObjectParameter("SecondUserDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MessageConclusionTime>("MessageConclusionTimeOperation", commandParameter, idParameter, firstUserIdParameter, secondUserIdParameter, firstUserDateParameter, secondUserDateParameter);
        }
    
        //public virtual ObjectResult<MessageConclusionTime> MessageConclusionTimeOperation(Nullable<int> command, Nullable<int> id, Nullable<int> firstUserId, Nullable<int> secondUserId, Nullable<System.DateTime> firstUserDate, Nullable<System.DateTime> secondUserDate, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var firstUserIdParameter = firstUserId.HasValue ?
        //        new ObjectParameter("FirstUserId", firstUserId) :
        //        new ObjectParameter("FirstUserId", typeof(int));
    
        //    var secondUserIdParameter = secondUserId.HasValue ?
        //        new ObjectParameter("SecondUserId", secondUserId) :
        //        new ObjectParameter("SecondUserId", typeof(int));
    
        //    var firstUserDateParameter = firstUserDate.HasValue ?
        //        new ObjectParameter("FirstUserDate", firstUserDate) :
        //        new ObjectParameter("FirstUserDate", typeof(System.DateTime));
    
        //    var secondUserDateParameter = secondUserDate.HasValue ?
        //        new ObjectParameter("SecondUserDate", secondUserDate) :
        //        new ObjectParameter("SecondUserDate", typeof(System.DateTime));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MessageConclusionTime>("MessageConclusionTimeOperation", mergeOption, commandParameter, idParameter, firstUserIdParameter, secondUserIdParameter, firstUserDateParameter, secondUserDateParameter);
        //}
    
        public virtual ObjectResult<Message> MessageOperation(Nullable<int> command, Nullable<int> id = null, string text = null, Nullable<int> userSenderId = null, Nullable<System.DateTime> date = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var userSenderIdParameter = userSenderId.HasValue ?
                new ObjectParameter("UserSenderId", userSenderId) :
                new ObjectParameter("UserSenderId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Message>("MessageOperation", commandParameter, idParameter, textParameter, userSenderIdParameter, dateParameter);
        }
    
        //public virtual ObjectResult<Message> MessageOperation(Nullable<int> command, Nullable<int> id, string text, Nullable<int> userSenderId, Nullable<System.DateTime> date, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var textParameter = text != null ?
        //        new ObjectParameter("Text", text) :
        //        new ObjectParameter("Text", typeof(string));
    
        //    var userSenderIdParameter = userSenderId.HasValue ?
        //        new ObjectParameter("UserSenderId", userSenderId) :
        //        new ObjectParameter("UserSenderId", typeof(int));
    
        //    var dateParameter = date.HasValue ?
        //        new ObjectParameter("Date", date) :
        //        new ObjectParameter("Date", typeof(System.DateTime));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Message>("MessageOperation", mergeOption, commandParameter, idParameter, textParameter, userSenderIdParameter, dateParameter);
        //}
    
        public virtual ObjectResult<PlayList> PlayListOperation(Nullable<int> command, Nullable<int> id = null, string name = null, string description = null, Nullable<int> userId = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlayList>("PlayListOperation", commandParameter, idParameter, nameParameter, descriptionParameter, userIdParameter);
        }
    
        //public virtual ObjectResult<PlayList> PlayListOperation(Nullable<int> command, Nullable<int> id, string name, string description, Nullable<int> userId, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var nameParameter = name != null ?
        //        new ObjectParameter("Name", name) :
        //        new ObjectParameter("Name", typeof(string));
    
        //    var descriptionParameter = description != null ?
        //        new ObjectParameter("Description", description) :
        //        new ObjectParameter("Description", typeof(string));
    
        //    var userIdParameter = userId.HasValue ?
        //        new ObjectParameter("UserId", userId) :
        //        new ObjectParameter("UserId", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlayList>("PlayListOperation", mergeOption, commandParameter, idParameter, nameParameter, descriptionParameter, userIdParameter);
        //}
    
        public virtual ObjectResult<PlayListSong> PlayListSongOperation(Nullable<int> command, Nullable<int> id = null, Nullable<int> songId = null, Nullable<int> playListId = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var songIdParameter = songId.HasValue ?
                new ObjectParameter("SongId", songId) :
                new ObjectParameter("SongId", typeof(int));
    
            var playListIdParameter = playListId.HasValue ?
                new ObjectParameter("PlayListId", playListId) :
                new ObjectParameter("PlayListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlayListSong>("PlayListSongOperation", commandParameter, idParameter, songIdParameter, playListIdParameter);
        }
    
        //public virtual ObjectResult<PlayListSong> PlayListSongOperation(Nullable<int> command, Nullable<int> id, Nullable<int> songId, Nullable<int> playListId, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var songIdParameter = songId.HasValue ?
        //        new ObjectParameter("SongId", songId) :
        //        new ObjectParameter("SongId", typeof(int));
    
        //    var playListIdParameter = playListId.HasValue ?
        //        new ObjectParameter("PlayListId", playListId) :
        //        new ObjectParameter("PlayListId", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlayListSong>("PlayListSongOperation", mergeOption, commandParameter, idParameter, songIdParameter, playListIdParameter);
        //}
    
        public virtual ObjectResult<Song> SongOperation(Nullable<int> command, Nullable<int> id = null, byte[] multimediaData = null, string name = null, string description = null, string type = null, string authorName = null, Nullable<System.DateTime> releaseDate = null, string album = null, Nullable<int> duraction = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var multimediaDataParameter = multimediaData != null ?
                new ObjectParameter("MultimediaData", multimediaData) :
                new ObjectParameter("MultimediaData", typeof(byte[]));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var releaseDateParameter = releaseDate.HasValue ?
                new ObjectParameter("ReleaseDate", releaseDate) :
                new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
            var albumParameter = album != null ?
                new ObjectParameter("Album", album) :
                new ObjectParameter("Album", typeof(string));
    
            var duractionParameter = duraction.HasValue ?
                new ObjectParameter("Duraction", duraction) :
                new ObjectParameter("Duraction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Song>("SongOperation", commandParameter, idParameter, multimediaDataParameter, nameParameter, descriptionParameter, typeParameter, authorNameParameter, releaseDateParameter, albumParameter, duractionParameter);
        }
    
        //public virtual ObjectResult<Song> SongOperation(Nullable<int> command, Nullable<int> id, byte[] multimediaData, string name, string description, string type, string authorName, Nullable<System.DateTime> releaseDate, string album, Nullable<int> duraction, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var multimediaDataParameter = multimediaData != null ?
        //        new ObjectParameter("MultimediaData", multimediaData) :
        //        new ObjectParameter("MultimediaData", typeof(byte[]));
    
        //    var nameParameter = name != null ?
        //        new ObjectParameter("Name", name) :
        //        new ObjectParameter("Name", typeof(string));
    
        //    var descriptionParameter = description != null ?
        //        new ObjectParameter("Description", description) :
        //        new ObjectParameter("Description", typeof(string));
    
        //    var typeParameter = type != null ?
        //        new ObjectParameter("Type", type) :
        //        new ObjectParameter("Type", typeof(string));
    
        //    var authorNameParameter = authorName != null ?
        //        new ObjectParameter("AuthorName", authorName) :
        //        new ObjectParameter("AuthorName", typeof(string));
    
        //    var releaseDateParameter = releaseDate.HasValue ?
        //        new ObjectParameter("ReleaseDate", releaseDate) :
        //        new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
        //    var albumParameter = album != null ?
        //        new ObjectParameter("Album", album) :
        //        new ObjectParameter("Album", typeof(string));
    
        //    var duractionParameter = duraction.HasValue ?
        //        new ObjectParameter("Duraction", duraction) :
        //        new ObjectParameter("Duraction", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Song>("SongOperation", mergeOption, commandParameter, idParameter, multimediaDataParameter, nameParameter, descriptionParameter, typeParameter, authorNameParameter, releaseDateParameter, albumParameter, duractionParameter);
        //}
    
        public virtual ObjectResult<UserMessage> UserMessageOperation(Nullable<int> command, Nullable<int> id = null, Nullable<int> messageId = null, Nullable<int> usergetterId = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var usergetterIdParameter = usergetterId.HasValue ?
                new ObjectParameter("UsergetterId", usergetterId) :
                new ObjectParameter("UsergetterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMessage>("UserMessageOperation", commandParameter, idParameter, messageIdParameter, usergetterIdParameter);
        }
    
        //public virtual ObjectResult<UserMessage> UserMessageOperation(Nullable<int> command, Nullable<int> id, Nullable<int> messageId, Nullable<int> usergetterId, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var messageIdParameter = messageId.HasValue ?
        //        new ObjectParameter("MessageId", messageId) :
        //        new ObjectParameter("MessageId", typeof(int));
    
        //    var usergetterIdParameter = usergetterId.HasValue ?
        //        new ObjectParameter("UsergetterId", usergetterId) :
        //        new ObjectParameter("UsergetterId", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMessage>("UserMessageOperation", mergeOption, commandParameter, idParameter, messageIdParameter, usergetterIdParameter);
        //}
    
        public virtual ObjectResult<DUser> UserOperation(Nullable<int> command, Nullable<int> id = null, string login = null, string password = null, Nullable<int> role = null)
        {
            var commandParameter = command.HasValue ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DUser>("UserOperation", commandParameter, idParameter, loginParameter, passwordParameter, roleParameter);
        }
    
        //public virtual ObjectResult<DUser> UserOperation(Nullable<int> command, Nullable<int> id, string login, string password, Nullable<int> role, MergeOption mergeOption)
        //{
        //    var commandParameter = command.HasValue ?
        //        new ObjectParameter("Command", command) :
        //        new ObjectParameter("Command", typeof(int));
    
        //    var idParameter = id.HasValue ?
        //        new ObjectParameter("Id", id) :
        //        new ObjectParameter("Id", typeof(int));
    
        //    var loginParameter = login != null ?
        //        new ObjectParameter("Login", login) :
        //        new ObjectParameter("Login", typeof(string));
    
        //    var passwordParameter = password != null ?
        //        new ObjectParameter("Password", password) :
        //        new ObjectParameter("Password", typeof(string));
    
        //    var roleParameter = role.HasValue ?
        //        new ObjectParameter("Role", role) :
        //        new ObjectParameter("Role", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DUser>("UserOperation", mergeOption, commandParameter, idParameter, loginParameter, passwordParameter, roleParameter);
        //}
    
    }
}
